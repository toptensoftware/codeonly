---
title: "Patch Class"
subtitle: "A simple, lightweight, code-only front-end Web framework."
projectTitle: CodeOnly
---
# Patch Class

The `Patch` class provides utility functions for patching, updating
and replacing items in arrays.

These methods are primarily intended to be used with `ObservableArray`
for dynamic `ForEach` block updates.

## Patch.array Function

Updates `target` array to match `source` array.  

```js
Patch.array(target, source, compare_key, patch_item)
```

* `target` - the target array to be updates
* `source` - the source array that the target will be made to match
* `compare_key(a, b)` - a callback to compare two objects for equal identity
* `patch_items(a, b, index)` - an optional callback to perform deep updates items with equal identity

The `compare_key` callback should compare objects for identity equality (eg: same 
object primary key).  Mis-matched key comparisons result in insertions and deletions in the 
target array.

The `patch_item` callback, if specified, is called for each pair of items that 
matched the key comparison.  This provides a way to perform deep updates of items with 
equivalent identity.  

The return value of patch_item determines how the array is updated:

* If the return value is `false`, no changes are made to the array for this item.
* If the return value is `true`:
    - if the array is an `ObservableArray` its `touch()` method will be called to mark 
        the entry as modified.
    - otherwise the target item is replaced with the source item
* Otherwise the target item is replaced with the returned value.

Often, `Patch.update_different` or `Patch.replace_different` can be used directly for the `patch_item` argument:


```js
let target = new ObservableArray();
let source = [...objects];

// Patch an array, inserting and deleting missing items based on `id` and
// replacing items with the same `id` but otherwise different.
patchArray(target, source, (a, b) => a.id == b.id, Patch.replace_different);
```

## Patch.replaceInArray Function

Finds the first item in `array` matching `predicate` (same params as 
`Array.findIndex`) and if found replaces the item in the array with `value`.

Returns the index of the found item, or -1 if not found.

```js
Patch.replaceInArray(array, predicate, value)
```

Example:

```js
onProductUpdates(product)
{
    // Finds an item in this.#products with matching id and replace
    // it with `product`
    Patch.replaceInArray(this.#products, x => x.id == product.id, product);
}
```

## Patch.updateInArray Function

Finds the first item in `array` matching `predicate` (same params as 
`Array.findIndex`) and if found replaces all the item's properties
with the properties of `value`.

Returns the index of the found item, or -1 if not found.

```
Patch.updateInArray(array, predicate, value)
```


## Patch.update_different Function

Deeply compares two objects.

* If they're the same returns `false`
* If they're different, replaces all the target object's properties
  with the source object properties and returns `true`.

```js
Patch.update_different(target, source)
```

## Patch.replace_different Function

Deeply compares two objects.

* If they're the same, returns `false`
* If they're different, return the source object.

```js
Patch.update_different(target, source)
```

## Patch.replace_always Function

Always returns the source object

```js
Patch.replace_always(target, source)
```


## Patch.update_always Function

Replaces all the target object's properties with the source object 
properties and returns `true`.

```js
Patch.update_always(target, source)
```

