---
title: "Router Class"
subtitle: "A simple, lightweight, code-only front-end Web framework."
projectTitle: CodeOnly
---
# Router Class

CodeOnly includes a simple, but flexible URL router designed for use
in single-page apps.

The router requires the History API and provides normal web-history
style routing (not hash based routing).

## Router Class and Singleton Instance

The router functionality is implemented by the `Router` class:

```js
import { Router } from "@toptensoftware/codeonly"

// Create router
let router = new Router();

// Use router...
```

However since you only ever need one instance, there is a built-in
singleton instance available as `router`.

```js
import { router } from "@toptensoftware/codeonly"

// Use router...
```

## Router Framework

Routing involves the following participants:

* Router - the router itself responsible for handling browser navigation events 
  and mapping them to routes.
* Route handlers - objects registered with the router to provide URL
  matching and handling.
* Route instances - an object that represents a matched URL and includes
  information like the URL, the associated handler, state and any other data the 
  handler wishes to associate with the route.
* Router listener - listens to navigation events from the Router and updates
  the DOM with the newly navigated to route.


## Registering Route Handlers

Route handlers are registered using the Router's `register` function which expects
an object with properties that control the route handler's behaviour:

```js
router.register({
    // The URL pattern this route handler matches
    pattern: "/about",

    // A handler called if pattern matches
    match: (route) => {

        // Create component for this object
        route.page = new AboutPageComponent();

        // Return true to confirm match of this route
        return true;
    }
});
```

The following properties are supported:  All are optional except
for the `match` method.

* `pattern` - an optional `RegExp` or string specifying a URL pattern for this
    route handler to match against.  If not specified, the `match` function will
    be called for all URLs.

    If the pattern is a string, it's converted to a RegExp using the [`urlPattern`](utilities#urlpattern-function)
    function.

* `match(route)` - a callback that is invoked once the pattern has been matched (or always
    if pattern is not specified).  
  
    `route` will be a partially constructed route object
    with the `url`, `originalUrl`, `match`, `viewState` and `state` parameters set.

    The `match` function can reject the match by returning `false`, or accept it by
    returning `true`.  When matching, a route handler will typically set additional properties on the route (eg: the page component instance to show).

    If the match function returns `null`, router navigation is canceled and the navigation
    passed back to the browser to do page load navigation.

* `leave(route)` - a callback invoked when navigating away from any route matched
    by this handler.

* `order` - an optional numeric value indicating the order this route handler
    should be matched in comparison to others.  Defaults to `0` if not specified.

* `captureViewState` - a function that returns a JSON serializable object representing
    the current view state (eg: scroll position).  See below for more information
    about view state restoration.

* `restoreViewState` - a function that restores a previously captured view state.


## Registering Navigation Listeners

Once a route has been matched, it's up to your application to do something with
that matched route by listening to the "navigate" event.

```js
router.addEventListener("navigate", () => {

    // Load navigated page into router slot
    if (router.current.page)
        this.routerSlot.content = router.current.page;

});
```


## The Router Object

The `router` class instance supports the following methods and properties:

* `current` - the route object of the currently matched URL
* `navigate` - starts forward navigation to a new in-app page
* `back` - starts backward navigation to the previous page, or if there is
    no previous page to the home page.
* `register` - registers a route handler
* `prefix` - a path prefix if the application is mounted in a sub-path (set this
    before calling the `start` method)
* `start` - starts the router, connecting to window and history events and
    performing the initial page navigation for the starting URL.


## The Route Object

Once a URL is matched to a route handler, a `route` object is created
representing the current route with the following properties:

* `url` - the matched url
* `originalUrl` - the original full URL before the prefix was stripped
* `match` - the result of running the pattern RegExp against the URL
* `handler` - the route handler that matched the URL
* `state` - any previously saved history state
* `viewState` - any previously captured view state information

The route handler can attach any additional information to the route
object as required.  Although not required, typically, by convention
a route handler will set a `.page` property to the component that
implements the route's view.

In the above examples, note how the `/about` route handler creates an 
`AboutPageComponent` instance and stores it in the route's `page` property.
This component instance is then picked up by the `navigate` listener 
elsewhere in the app and loaded into an `EmbedSlot`.


## Not Found Page

To handle URL's not recognized by your app, you should register
a "Not Found" page.

Notice this handler doesn't have a pattern (ie: it matches
anything) and the `order` property is set high enough to be matched
after all other routes have failed to match.

```js
router.register({
    match: (r) => {
        r.page = new NotFoundPage(r.url);
        return true;
    },
    order: 1000,
});
```


## Creating Links to Routes

The router listens for any clicks on anchor elements with a `href` that
starts with a `/` and, if set, matches the `router.prefix`.

All other clicks on links will be ignored by the router and normal
page load navigation will take place.



## Reverting to Browser Navigation

If you have links that look like in-app links but are actually out-of-page 
links, you can force page load navigation by returning `null` from a route
handler's `match` function.

eg: suppose `/admin` should leave the single page app and load a separate
page.

```js
router.register({
    pattern: "/admin"
    match: (r) => null,         // null means cancel router and pass to browser.
});
```



## Typical Setup

The following shows a typical setup for using the router.

Firstly, create a component for each of your pages and register a 
route handler for it.  

If your page requests async data, set its `loading` property before 
returning from the `match` function to prevent the router from 
trying to restore the scroll position until the page data is loaded.
(See below for more about view state restoration)

```js
import { Component, router } from `@toptensoftware/codeonly`

// A component for the product page
class ProductPage extends Component
{
    constructor(product_id)
    {
        this.product_id = product_id;
        this.load();
    }

    async load()
    {
        // Set loading flag to prevent scroll position
        // restoration until initial load is complete
        this.loading = true;
        let data = await api.getProduct(this.product_id);
        this.loading = false;
    }

    // etc...
}

// Register route handler
router.register({
    pattern: "/product/:productId",
    match: (route) => {

        // Create new product page
        route.page = new ProductPage(route.match.groups.productId);

        // Indicate we've matched this route
        return true;

    },
});

```

Next, listen for the "navigate" event and load the created page into
the main content area of your app.  Also, call the router's `start` method to hook up event handlers and
do the initial page navigation.

```js
import { Component, router } from `@toptensoftware/codeonly`

// Main application instance mounted to DOM
class Application extends Component
{
    constructor()
    {
        // Listen for navigate event
        router.addEventListener("navigate", () => {

            // Load navigated page into router embed slot
            if (router.current.page != null)
                this.routerSlot.content = router.current.page;

        });

        // Start the router (connect to window and history 
        // navigation events, do initial page navigation).
        router.start();
    }


    static template = {
        type: "main",
        $: [
            { 
                // Router pages will be loaded here
                type: "embed-slot", 
                bind: "routerSlot",
            },
        ]
    };
}

```

That's it for simple page navigation.


## View State Restoration

View state restoration refers to the ability to capture and restore
information about the current page that typically isn't included in 
the URL.

The most common kind of view state data is the current document scroll 
position - which the router handles automatically for most use cases, 
but this process can be customized.

* When a route is left, the router calls the handler's `captureViewState`
    method which should capture the current view state and return it as 
    JSON serializable object.

* When a route is returned to, the router calls the handler's `restoreViewState`
    passing the previously captured state.

If the handler doesn't define the `captureViewState` nor `restoreViewState`
methods, they're automatically mapped to `DocumentScrollPosition.get()` and 
`DocumentScrollPosition.set(value)` which simply capture and restore the current 
document scroll position.

There are several ways to customize view state restoration:

* Supply your own implementations of the capture and restore view state methods.
* Supply your own implementation of `captureViewState`, but leave 
    `restoreViewState` unset (or set to null) and use the `route.viewState` view 
    to restore the view. (eg: from inside the `match` call).
* Set both `captureViewState` and `restoreViewState` to null to disable
    view state restoration.

## View State Restoration with Async Data Loads

Often a single page app will need to asynchronously load data from a
server when loading a new page.  In this case,  view state restoration needs
to be delayed until that initial data load has completed.

This is supported automatically by the router by the convention of using
`route.page` to hold a page component for the navigated to page and using
the page's `loading` property to indicate if the page has loaded.

After the router fires the `navigate` event to load the new page, it
checks if the route has a `.page` property.  If it does and if the page
has a `.loading` property set to true it delays the call to 
`restoreViewState` until the page's `loaded` event is fired.

In other words to support view state restoration with async data load:

* use the `page` property of the `route` object to represent the page to 
    be loaded.
* before returning from `match` make sure the page's `loading` property
    is set to true.



## View State Restoration and Silent Page Refreshes

If a page instance is cached and re-used for multiple routes or when 
returning to a previously loaded page, that page might already have
data loaded and view state restoration usually doesn't need to be 
delayed.  

However, if the page needs to silently refresh itself when it comes back 
into view, consider not setting the `loading` property during the refresh 
data request - this will both allow the view state restoration to complete 
immediately and also prevent spinners and other UI feedback during the 
silent background refresh.


## Page Titles

The Router doesn't include any built in support for document page titles
but it's pretty easy to build it yourself.

Just have the route handler add a `title` property to the route when it
matches:

```js
router.register({
    pattern: "/product/:productId",
    match: (route) => {
        route.page = new ProductPage(route.match.groups.productId);
        route.title = `Product ${route.match.groups.productId}`;
        return true;
    },
});
```

Update the `document.title` in your navigation handler:

```js
router.addEventListener("navigate", () => {

    if (router.current.page)
        this.routerSlot.content = router.current.page;

    // Update document title
    if (router.current.title)
        document.title = `${router.current.title} - My CodeOnly Site`;
    else
        document.title = "My CodeOnly Site";

});
```

Now, visiting `/product/prod-123` will set the document title
of "prod-123 - My CodeOnly Site" and any routes that don't have a 
title will display just the site name.


## Routes to Modal Dialogs

In additional to regular page navigation, the router can also be used
for routes that present as modal dialogs.

Firstly, the `match` function should create and show the modal dialog and 
the `leave` method should close the dialog:

```js
router.register({
    pattern: "/product-photo-popup/:productIdd",
    match: (r) => {
        r.modal = new ProductPhotoDialog(r.match.groups.productId);
        r.modal.showModal();
        return true;
    },
    leave: (r) => {
        r.modal.close();
    },
});
```

Notice how the `match` function doesn't set the `page` property on the
route. (Make sure your `navigate` event handler is ready for this).

As is, this will handle forward and back navigation to/from the dialog
however we need to also handle the case where the user explicitly closes
the dialog via a button or Escape key.

Your dialog probably already has a `close` listener to remove the 
dialog from the DOM when it's closed. At this point, we just check
if the current route refers to this dialog, and if so, tell the 
router to navigate back:

```js
    this.dom.rootNode.addEventListener("close", () => {

        // If we're the current router item this means
        // we were closed by the UI (escape key) and not
        // by navigating backwards.  Do the back navigation
        // now to go back to where we came.
        if (router.current.modal == this)
            router.back();
```

Note: if the initial page loaded by the app was the dialog, the `back`
function doesn't have anywhere to go back to.  The router detects this
case and instead navigates to the home page - as indicated by the 
`router.prefix` if set, otherwise `/`.

