---
title: "Introduction"
subtitle: "A simple, lightweight, code-only front-end Web framework."
projectTitle: CodeOnly
---
# Introduction

CodeOnly is a simple, lightweight, easy-to-learn framework for
front-end web development. 

It's designed for coders, it's fast and small and uses modern 
JavaScript.  It's tool-free during development so there's
no bundling or build steps but can, and should be bundled for
production.

Perhaps controversially, it's non-reactive. But, this also means 
it's non-invasive - your objects are untouched. There's no 
observables or watchers and definitely no monkey-patching or 
`Proxy` wrappers.

CodeOnly provides an amazing development experience because there
is no build step. Code changes apply instantly and you debug your code 
exactly as you wrote it - no transpiling and no surprising wrappers
or proxies to debug through.


## Basic Example

Before getting into the details of how to setup a CodeOnly project
let's have a look at a simple example that will give you an idea of 
what working with CodeOnly is like.

This simple component consists of a `div` containing a `button` and 
a text `span` that shows how many times the button has been clicked.

<div class="tip">

Hovering over the info icons in sample code shows further explanatory notes.

</div>

```js
// demo
class Main extends Component /* Components extend the `Component` class */
{
  count = 0; /* Class fields and functions are available to the template */

  onClick() /* Button click event handler */
  { 
    this.count++; 
    this.invalidate(); /* Marks the component as needing DOM update */
  }

  static template = { /* This is the component's DOM template */
    type: "div", /* Root element type */
    class: "counter", /* Scoping CSS class */
    $: [ /* Child nodes array */
      {
        type: "button",
        text: `Click Me`,
        on_click: c => c.onClick(), /* `c` is the component instance */
      },
      {
        type: "span",
        text: c => `Count: ${c.count}`, /* Callback for dynamic content */
      }
    ]
  }
}

Style.declare( /* CSS styles (with `.counter` as scoping class) */
`
.counter
{
  button
  {
    margin-right: 10px
  }
}
`); 
```

<div class="tip">

Above is an embedded, running version of this component - try clicking the "Click Me" 
button.  You can also click the "Edit in The Lab" link to experiment with the code.

</div>

Let's take a closer look some of the features of developing components this way.


## Single File Components

One of the nicest things about developing CodeOnly components is that everything
about a component can be contained in one regular `.js` file.

Notice in the above example how the logic, DOM template and CSS styles are all
declared together in the one place.

Also, because it's straight JavaScript there's no need for tooling, a build
step or special editor support.


## Non-Reactive

Unlike most other front-end frameworks, we've decided against any form of
automatic reactivity in CodeOnly.

The main reason for this is that the cleanest way to implement reactivity 
is by wrapping objects in JavaScript proxies. 

Unfortunately, proxies have problems:

* Proxies are slow - property access can be x80 slower when an object is 
  wrapped in a Proxy, even if the proxy does nothing.
* Proxies are incompatible with private class fields - if an object with 
  private fields is proxied, the object itself can no longer access its own
  private fields. ([See for yourself](/lab#H4sIAAAAAAAACmVQwWrDMAz9lYd3aWHU3XWlp8LOPRR28cW11cYjkYPsNRsh/z6cmLJ1Oj30np70NCoXPalXpTUOrU0JQ8gNegk3mwmXQK037GbmRCnPGsOjYQB4qrq3IsMeL9vtbmGulI+/uNV6ade5UkL5Uxi5CWnzx6c6TIYnw4a1xrvYHiEjMCx6iV/fhm9WFog9mAYcC14VdD/zGSOm9a6alDaWIM4yOKKNfCWBdY5SQsgJceDH6FrDqINljhlC1t/5jrozycMLLhI7WEY8f5DLmMeHJiaqm33wKE6eXGuFELJRhuccm38vmy9X0w9JSCRhowEAAA==))

The other way to provide reactivity is to declare all reactive properties
using library functions or wrapper objects etc...  To us, this just 
seems messy and we like our JavaScript objects clean.

Of course this means you need to do a little extra work to keep the DOM
up to date, but it's usually not that hard and we think the trade off 
is worth it.

In the above example, all we need do is call the component's `invalidate()` 
method when its DOM needs to be updated.


## JavaScript DOM Templates

CodeOnly doesn't try to cram the declaration of dynamic values into an
existing markup language.  Instead, DOM templates are declared using
plain JavaScript objects that use fat arrow `=>` callbacks to provide 
dynamic values.

Yes, it's a little more verbose but it's surprising how flexible this
approach is.

* There's no special syntax or markup to learn.
* Templates can be included directly in the component class without
  special tooling, pre-processing or build steps.
* You can compose and generate templates by calling functions to "create"
  the template.


## Styles

In the above example, notice how we've included the CSS declarations
for the component using the `Style.declare()` method.

This approach is completely optional, but it lets us declare everything 
about a component in the one file.

Also, notice how we've use a class to scope the CSS declarations
for this component to a CSS class applied at the root of the component's
DOM template.  This helps avoid CSS clashes between components.


