---
title: "UpdateManager Class"
subtitle: "A simple, lightweight, code-only front-end Web framework."
projectTitle: CodeOnly
---
# UpdateManager Class

The `UpdateManager` class provides an easy way to fire object update notifications.

```js
class UpdateManager
{
    // Adds a listener for sourceObject
    addListener(sourceObject, callback);

    // Removes a previously added listener for sourceObject
    removeListener(sourceObject, callback);

    // Fires an event to all sourceObject to listeners
    fire(sourceObject, ...params);
}
```

For example, suppose we have a set of `Post` objects displayed in a list
using a set of `PostView` components.  When something about a `Post` changes
we need a way to notify the assocated `PostView` instance to invalidate or
update itself.

First, we have the `Post` object fire a notification when it changes:

```js
import { updateManager } from "@toptensoftware/codeonly.js";

class Post
{
    #text;
    get text()
    {
        return this.#text;
    }
    set text(value)
    {
        // Store new text
        this.#text = value;

        // Notify all components showing this post
        updateManager.fire(this);
    }
}
```

Second, the `PostView` component needs to listen to the update manager
for notifications of when its associated `Post` changes:

```js
import { Component, updateManager } from "@toptensoftware/codeonly.js";

class PostView extends Component
{
    #post;
    get post()
    {
        return this.#post;
    }
    set post(value)
    {
        // Remove old listener (redundant if this.#post is null or undefined)
        updateManager.removeListener(this.#post, this.invalidate);

        // Store new object
        this.#post = value;

        // Add new listener.  When post object fires update notification
        // this component will be invalidated and DOM eventually updated
        updateManager.addListener(this.#post, this.invalidate);
    }

    destroy()
    {
        // This is optional but prevents additional update callbacks
        // once this PostView has been removed from the DOM.
        updateManager.removeListener(this.#post, this.update);
    }

    static template = {
        type: "div",
        $: c => c.post.text,
    };
}
```


Some notes about the above:

* `updateManager` is the default instance of the `UpdateManager` class.  You
  can create additional instances if you like (`new UpdateManager()`) but in general
  this shouldn't be necessary.
* Calls to `addListener` and `removeListener` methods are ignored if the passed 
  source object is `null` or `undefined`.
* The `Component.update()` and `Component.invalidate()` methods are already pre-bound
  to the `Component` instance.  ie: don't do this: `addListener(this.#post, this.update.bind(this))`.
* Because the `updateManager` uses a `WeakMap` to track source objects, there's
  no risk of `Post` objects not getting collected.
* To prevent unnecessary updates on components removed from the DOM, the Component overrides
  `destroy` and removes its listener.

Also note, the update manager can be used with plain objects.  For example, assume
our Post objects are plain JSON objects (ie: not implemented as a class like above) and
we receive a network update that a post has changed

```js
// A map of post.id => plain JavaScript object
_postMap = new Map();

// Find the original post object
let post = _postMap.get(updatedPost.id);
if (post)
{
    // Update it
    Object.assign(post, updatedPost);

    // Update anyone interested in changes to this post object
    updateManager.fire(post);
}

```

Also note, any parameters passed to the `fire` method are passed on 
to the event listeners:

```js
updateManager.addListener(post, (obj, p1) => {
    // obj = the source object
    // p1 = "param1"
});

updateManager.fire(post, "param1");
```
